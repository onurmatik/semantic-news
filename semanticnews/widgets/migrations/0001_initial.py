# Generated by Django 5.2.7 on 2025-10-23 10:06

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("topics", "0033_rename_topicrelatedtopic_relatedtopic"),
    ]

    operations = [
        migrations.CreateModel(
            name="TopicWidget",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "widget_type",
                    models.CharField(
                        choices=[
                            ("title", "Title"),
                            ("recap", "Recap"),
                            ("cover_image", "Cover image"),
                            ("text", "Text block"),
                            ("data", "Data block"),
                            ("timeline", "Timeline"),
                            ("events", "Linked events"),
                            ("related_topics", "Related topics"),
                            ("external_links", "External links"),
                            ("documents", "Documents"),
                            ("entities", "Entities"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        default="en",
                        help_text="BCP 47 language tag identifying the widget's content.",
                        max_length=12,
                    ),
                ),
                (
                    "is_primary_language",
                    models.BooleanField(
                        default=False,
                        help_text="Marks the widget instance for the topic's primary language.",
                    ),
                ),
                (
                    "placement",
                    models.CharField(
                        blank=True,
                        choices=[("content", "Content area"), ("sidebar", "Sidebar")],
                        help_text="Determines which column renders this widget.",
                        max_length=20,
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Ordering within the widget's column."
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Optional short title displayed with the widget.",
                        max_length=255,
                    ),
                ),
                (
                    "body",
                    models.TextField(
                        blank=True,
                        help_text="Free-form textual payload for the widget.",
                    ),
                ),
                (
                    "payload",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Structured payload for widget specific data.",
                    ),
                ),
                (
                    "ai_context",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="State shared with AI assistants when suggesting updates.",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="widgets",
                        to="topics.topic",
                    ),
                ),
            ],
            options={
                "ordering": ("placement", "display_order", "id"),
                "constraints": [
                    models.UniqueConstraint(
                        condition=models.Q(("is_primary_language", True)),
                        fields=("topic", "widget_type"),
                        name="widgets_unique_primary_per_type",
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(
                            (
                                "widget_type__in",
                                [
                                    "title",
                                    "recap",
                                    "cover_image",
                                    "timeline",
                                    "events",
                                    "related_topics",
                                    "external_links",
                                    "documents",
                                    "entities",
                                ],
                            )
                        ),
                        fields=("topic", "widget_type", "language_code"),
                        name="widgets_unique_singleton_per_language",
                    ),
                ],
            },
        ),
    ]
