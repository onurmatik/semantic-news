# Generated by Django 5.2.1 on 2025-10-25 18:28

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import pgvector.django.indexes
import pgvector.django.vector
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('agenda', '0001_initial'),
        ('contents', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('entities', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MCPServer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=100)),
                ('url', models.URLField()),
                ('headers', models.JSONField(blank=True, default=dict)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='RelatedTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('manual', 'Manual'), ('auto', 'Automatic')], default='manual', max_length=20)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_topic_related_topics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at', '-id'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('slug', models.SlugField(blank=True, max_length=200, null=True)),
                ('embedding', pgvector.django.vector.VectorField(blank=True, dimensions=1536, null=True)),
                ('status', models.CharField(choices=[('removed', 'Removed'), ('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], db_index=True, default='draft', max_length=20)),
                ('last_published_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('based_on', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='derivatives', to='topics.topic')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='topics', to=settings.AUTH_USER_MODEL)),
                ('related_topics', models.ManyToManyField(blank=True, related_name='related_to_topics', through='topics.RelatedTopic', to='topics.topic')),
            ],
        ),
        migrations.AddField(
            model_name='relatedtopic',
            name='related_topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_related_topic_links', to='topics.topic'),
        ),
        migrations.AddField(
            model_name='relatedtopic',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_related_topics', to='topics.topic'),
        ),
        migrations.CreateModel(
            name='TopicContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('evidence', 'Evidence'), ('summary', 'Summary'), ('quote', 'Quote')], default='evidence', max_length=20)),
                ('source', models.CharField(choices=[('user', 'User'), ('ml', 'ML'), ('rule', 'Rule')], default='user', max_length=10)),
                ('relevance', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contents.content')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='topics.topic')),
            ],
        ),
        migrations.AddField(
            model_name='topic',
            name='contents',
            field=models.ManyToManyField(blank=True, related_name='topics', through='topics.TopicContent', to='contents.content'),
        ),
        migrations.CreateModel(
            name='TopicData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('data', models.JSONField()),
                ('sources', models.JSONField(default=list)),
                ('explanation', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datas', to='topics.topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicDataAnalysisRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('started', 'Started'), ('success', 'Success'), ('failure', 'Failure')], default='pending', max_length=20)),
                ('task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('input_payload', models.JSONField(default=dict)),
                ('result', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('saved_insight_ids', models.JSONField(blank=True, default=list)),
                ('saved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_analysis_requests', to='topics.topic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_data_analysis_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TopicDataInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('sources', models.ManyToManyField(related_name='insights', to='topics.topicdata')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_insights', to='topics.topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicDataRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(choices=[('url', 'URL'), ('search', 'Search')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('started', 'Started'), ('success', 'Success'), ('failure', 'Failure')], default='pending', max_length=20)),
                ('task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('input_payload', models.JSONField(default=dict)),
                ('result', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('saved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('saved_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_requests', to='topics.topicdata')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_requests', to='topics.topic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_data_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TopicDataVisualization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chart_type', models.CharField(max_length=50)),
                ('chart_data', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('insight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='visualizations', to='topics.topicdatainsight')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_visualizations', to='topics.topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicDataVisualizationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('started', 'Started'), ('success', 'Success'), ('failure', 'Failure')], default='pending', max_length=20)),
                ('task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('input_payload', models.JSONField(default=dict)),
                ('result', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('saved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('saved_visualization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_visualization_requests', to='topics.topicdatavisualization')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_visualization_requests', to='topics.topic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topic_data_visualization_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TopicDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255)),
                ('url', models.URLField(max_length=1000)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('document_type', models.CharField(choices=[('pdf', 'PDF'), ('doc', 'DOC'), ('docx', 'DOCX'), ('ppt', 'PowerPoint'), ('xls', 'Spreadsheet'), ('txt', 'Text'), ('other', 'Other')], default='other', max_length=20)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='topics.topic')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TopicEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('relevance', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='entities.entity')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='topics.topic')),
            ],
        ),
        migrations.AddField(
            model_name='topic',
            name='entities',
            field=models.ManyToManyField(blank=True, related_name='topics', through='topics.TopicEntity', to='entities.entity'),
        ),
        migrations.CreateModel(
            name='TopicEntityRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relations', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('in_progress', 'In progress'), ('finished', 'Finished'), ('error', 'Error')], default='in_progress', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('error_code', models.CharField(blank=True, max_length=20, null=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entity_relations', to='topics.topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('support', 'Support'), ('counter', 'Counter'), ('context', 'Context')], default='support', max_length=20)),
                ('source', models.CharField(choices=[('user', 'User'), ('agent', 'Agent'), ('rule', 'Rule')], default='user', max_length=10)),
                ('relevance', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('significance', models.PositiveSmallIntegerField(choices=[(1, 'Normal'), (2, 'High'), (3, 'Very high')], default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='agenda.event')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='topics.topic')),
            ],
        ),
        migrations.AddField(
            model_name='topic',
            name='events',
            field=models.ManyToManyField(blank=True, related_name='topics', through='topics.TopicEvent', to='agenda.event'),
        ),
        migrations.CreateModel(
            name='TopicImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='topics_images')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='topics_images')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('is_hero', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('in_progress', 'In progress'), ('finished', 'Finished'), ('error', 'Error')], default='in_progress', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('error_code', models.CharField(blank=True, max_length=20, null=True)),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='topics.topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicModuleLayout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_key', models.CharField(max_length=50)),
                ('placement', models.CharField(choices=[('primary', 'Primary'), ('sidebar', 'Sidebar')], default='primary', max_length=20)),
                ('version', models.PositiveIntegerField(default=1)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='module_layouts', to='topics.topic')),
            ],
            options={
                'ordering': ['display_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='TopicPublication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('published_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('layout_snapshot', models.JSONField(default=dict)),
                ('context_snapshot', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='topic_publications', to=settings.AUTH_USER_MODEL)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publications', to='topics.topic')),
            ],
            options={
                'ordering': ('-published_at', 'id'),
            },
        ),
        migrations.AddField(
            model_name='topic',
            name='latest_publication',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='topics.topicpublication'),
        ),
        migrations.CreateModel(
            name='TopicPublicationModule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('module_key', models.CharField(max_length=50)),
                ('placement', models.CharField(max_length=20)),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('payload', models.JSONField(default=dict)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='topics.topicpublication')),
            ],
            options={
                'ordering': ('placement', 'display_order', 'id'),
            },
        ),
        migrations.CreateModel(
            name='TopicPublicationSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component_type', models.CharField(max_length=100)),
                ('module_key', models.CharField(blank=True, max_length=100)),
                ('object_id', models.PositiveBigIntegerField(blank=True, null=True)),
                ('payload', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='topics.topicpublication')),
            ],
            options={
                'ordering': ('publication', 'id'),
            },
        ),
        migrations.CreateModel(
            name='TopicRecap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recap', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('in_progress', 'In progress'), ('finished', 'Finished'), ('error', 'Error')], default='in_progress', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('error_code', models.CharField(blank=True, max_length=20, null=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recaps', to='topics.topic')),
            ],
        ),
        migrations.CreateModel(
            name='TopicText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('in_progress', 'In progress'), ('finished', 'Finished'), ('error', 'Error')], default='finished', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('error_code', models.CharField(blank=True, max_length=20, null=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='texts', to='topics.topic')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TopicTweet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tweet_id', models.CharField(db_index=True, max_length=50)),
                ('url', models.URLField()),
                ('html', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tweets', to='topics.topic')),
            ],
            options={
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='TopicWebpage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255)),
                ('url', models.URLField(max_length=1000)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webpages', to='topics.topic')),
            ],
            options={
                'verbose_name': 'Webpage',
                'verbose_name_plural': 'Webpages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TopicYoutubeVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, null=True)),
                ('video_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('thumbnail', models.URLField(blank=True, null=True)),
                ('video_published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('published_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('in_progress', 'In progress'), ('finished', 'Finished'), ('error', 'Error')], default='in_progress', max_length=20)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('error_code', models.CharField(blank=True, max_length=20, null=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='youtube_videos', to='topics.topic')),
            ],
        ),
        migrations.AddConstraint(
            model_name='relatedtopic',
            constraint=models.UniqueConstraint(fields=('topic', 'related_topic'), name='unique_topic_related_topic'),
        ),
        migrations.AddIndex(
            model_name='topiccontent',
            index=models.Index(fields=['topic'], name='topics_topi_topic_i_6f47f7_idx'),
        ),
        migrations.AddIndex(
            model_name='topiccontent',
            index=models.Index(fields=['content'], name='topics_topi_content_52c700_idx'),
        ),
        migrations.AddConstraint(
            model_name='topiccontent',
            constraint=models.UniqueConstraint(fields=('topic', 'content'), name='unique_topic_content'),
        ),
        migrations.AddIndex(
            model_name='topicdocument',
            index=models.Index(fields=['topic'], name='topics_topi_topic_i_e00806_idx'),
        ),
        migrations.AddIndex(
            model_name='topicdocument',
            index=models.Index(fields=['document_type'], name='topics_topi_documen_eeb3ff_idx'),
        ),
        migrations.AddIndex(
            model_name='topicevent',
            index=models.Index(fields=['topic'], name='topics_topi_topic_i_c24cda_idx'),
        ),
        migrations.AddIndex(
            model_name='topicevent',
            index=models.Index(fields=['event'], name='topics_topi_event_i_6ab48f_idx'),
        ),
        migrations.AddIndex(
            model_name='topicevent',
            index=models.Index(fields=['topic', 'significance'], name='topics_topi_topic_i_b044ac_idx'),
        ),
        migrations.AddConstraint(
            model_name='topicevent',
            constraint=models.UniqueConstraint(fields=('topic', 'event'), name='unique_topic_event'),
        ),
        migrations.AlterUniqueTogether(
            name='topicmodulelayout',
            unique_together={('topic', 'module_key')},
        ),
        migrations.AddIndex(
            model_name='topic',
            index=pgvector.django.indexes.HnswIndex(ef_construction=64, fields=['embedding'], m=16, name='topic_embedding_hnsw', opclasses=['vector_l2_ops']),
        ),
        migrations.AddConstraint(
            model_name='topic',
            constraint=models.UniqueConstraint(fields=('slug', 'created_by'), name='unique_topic_title_user'),
        ),
        migrations.AddIndex(
            model_name='topicpublicationsnapshot',
            index=models.Index(fields=['publication', 'component_type'], name='topics_topi_publica_4e9d6d_idx'),
        ),
        migrations.AddConstraint(
            model_name='topictweet',
            constraint=models.UniqueConstraint(fields=('topic', 'tweet_id'), name='unique_topic_tweet'),
        ),
        migrations.AddIndex(
            model_name='topicwebpage',
            index=models.Index(fields=['topic'], name='topics_topi_topic_i_e5a6e5_idx'),
        ),
        migrations.AddIndex(
            model_name='topicwebpage',
            index=models.Index(fields=['created_at'], name='topics_topi_created_a10f6b_idx'),
        ),
    ]
